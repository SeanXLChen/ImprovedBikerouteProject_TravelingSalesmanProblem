In this project, we aim to find the shortest path between a cooridinates (by default its NEU) and a park using bike routes, providing users an easy and efficient way to plan a bike ride. The project leverages two data sets: one for the bike routes and the other for park locations. The bike routes dataset, available at [https://opendata.vancouver.ca/api/explore/v2.1/catalog/datasets/bikeways/exports/csv?lang=en&timezone=America%2FLos_Angeles&use_labels=true&delimiter=%3B], includes information about each bike route coordinates and route name. The park locations dataset, available at [https://opendata.vancouver.ca/api/explore/v2.1/catalog/datasets/parks-polygon-representation/exports/csv?lang=en&timezone=America%2FLos_Angeles&use_labels=true&delimiter=%3B], contains the park name, coordinates of the park's vertices, and the center point of the park.

To process and analyze the data, we first read it into appropriate objects. The bike routes data is read into a Graph object, where each vertex represents a point on a bike route and edges represent the connections between these points. The graph is constructed using a DoublyLinkedList structure to efficiently store adjacency information. The park data is read into Park objects, which store the park's name, coordinates of its vertices, and its center point. The school data is read into a School object, which stores the school's name and coordinates.

The core analysis performed in this project involves finding the shortest path between a school and a park using Dijkstra's algorithm. The algorithm works on the Graph object and calculates the shortest distance from the school to each park. The results of this analysis are stored in a list representing the shortest path between the school and the chosen park.

We visualize the data using a combination of lines and points to represent the bike routes and park locations on a 2D map. The shortest path between the school and the park is highlighted using a distinct color to make it easily identifiable. The visualization is presented to the user via a Graphical User Interface (GUI) built using Tkinter. The GUI provides a dropdown menu for the user to select a park, and upon selection, the shortest path to the park is displayed on the map.